@using Azure.AI.OpenAI;
@using Azure;
@using System.Text;
@using Microsoft.Extensions.Options;
@using PyProcessors;
@using TestOpenAI.Models;
<h3>Summarize</h3>
<div class="d-flex justify-content-between">
    <InputFile OnChange="@LoadFiles" />
    <span>@processMsg</span>
</div>
<div class="mb-3">
    <textarea @bind="prompt" class="form-control shadow" rows="20"></textarea>
</div>
<div class="mb-3 border border-2 p-2 rounded shadow white-space-preline pt-0">
    @*@if(loading)
    {
        <text>Loading...</text>
    }
    else
    {
        @((MarkupString)promptResponse)
    }*@
    @((MarkupString)promptResponse)
</div>
<button class="btn btn-primary" type="button" role="button" @onclick="Summarize" disabled="@loading">
    @if (loading)
    {
        <span>Loading...</span>
    }
    else
    {
        <span>Summarize</span>
    }
</button>

@code {
    [Inject] protected IConfiguration configuration { get; set; }
    [Inject] protected IOptionsMonitor<AOAISettings> aoaiSettings { get; set; }
    [Inject] protected IWebHostEnvironment webHostEnvironment { get; set; } = null!;
    string AOAI_ENDPOINT;
    string AOAI_KEY;
    string AOAI_DEPLOYMENTID_TEXT;
    string AOAI_DEPLOYMENTID_EMBEDDED;
    string AOAI_DEPOYMENTID_CHAT_MODEL_NAME;
    OpenAIClient openAIClient;
    string prompt;
    string promptResponse;
    string processMsg = String.Empty;
    bool loading = false;
    protected override void OnInitialized()
    {
        AOAI_ENDPOINT = aoaiSettings.CurrentValue.AOAI_ENDPOINT;// configuration.GetValue<string>("Chat:AOAI_ENDPOINT");
        AOAI_KEY = aoaiSettings.CurrentValue.AOAI_KEY;// configuration.GetValue<string>("Chat:AOAI_KEY");
        AOAI_DEPLOYMENTID_TEXT = aoaiSettings.CurrentValue.AOAI_DEPLOYMENTID_TEXT;// configuration.GetValue<string>("Chat:AOAI_DEPLOYMENTID_TEXT");
        AOAI_DEPLOYMENTID_EMBEDDED = aoaiSettings.CurrentValue.AOAI_DEPLOYMENTID_EMBEDDED;// configuration.GetValue<string>("Chat:AOAI_DEPLOYMENTID_EMBEDDED");
        AOAI_DEPOYMENTID_CHAT_MODEL_NAME = aoaiSettings.CurrentValue.AOAI_DEPOYMENTID_CHAT_MODEL_NAME;

        var endpoint = new Uri(AOAI_ENDPOINT);
        var credentials = new Azure.AzureKeyCredential(AOAI_KEY);
        openAIClient = new OpenAIClient(endpoint, credentials);
    }

    protected async Task Summarize()
    {
        loading = true;
        promptResponse = "";// "Loading...";
        var completionsOptions = new CompletionsOptions()
            {
                Prompts = { prompt },
                Temperature = (float)0.3,
                MaxTokens = 2000,// 250,
                NucleusSamplingFactor = (float)1,
                FrequencyPenalty = (float)0,
                PresencePenalty = (float)0,
                GenerationSampleCount = 1,
            };
        //Completions response = await openAIClient.GetCompletionsAsync(AOAI_DEPLOYMENTID_TEXT, completionsOptions);

        Response<StreamingCompletions> responseStreaming = await openAIClient.GetCompletionsStreamingAsync(AOAI_DEPLOYMENTID_TEXT, completionsOptions);
        using StreamingCompletions streamingCompletions = responseStreaming.Value;

        string reasonStop = "";
        await foreach (var item in streamingCompletions.GetChoicesStreaming())
        {
            reasonStop = item.FinishReason;
            loading = item.FinishReason is not null;
            await foreach(var i in item.GetTextStreaming())
            {
                promptResponse += i;
                await InvokeAsync(StateHasChanged);
            }
        }

        loading = false;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;

        //var trustedFileNameForFileStorage = Path.ChangeExtension(Path.GetRandomFileName(),".pdf");
        var uploadDir = Path.Combine(webHostEnvironment.ContentRootPath, "dbs","source");
        if (!Directory.Exists(uploadDir))
        {
            Directory.CreateDirectory(uploadDir);
        }
        var indexDir = Path.Combine(webHostEnvironment.ContentRootPath, "dbs", "index");
        //var path = Path.Combine(uploadDir, trustedFileNameForFileStorage);
        var path = Path.Combine(uploadDir, Path.GetFileName(file.Name));
        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fs);
        fs.Flush();


        var pdfProcessor = new PdfProcessor(AOAI_KEY, AOAI_ENDPOINT, AOAI_DEPLOYMENTID_EMBEDDED);
        pdfProcessor.OnProcess += async (sender, msg) =>
        {
            processMsg = msg;
            await InvokeAsync(StateHasChanged);
        };
        pdfProcessor.OnCompleted += async (sender, success) =>
        {
            if (success)
                processMsg = String.Empty;
            else
                processMsg = "Error indexing file";
            await InvokeAsync(StateHasChanged);
        };
        var indexFileName = pdfProcessor.ProcessPdf(path,indexDir);

        //isLoading = true;
        //loadedFiles.Clear();

        //foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        //{
        //    try
        //    {
        //        loadedFiles.Add(file);

        //        var trustedFileNameForFileStorage = Path.GetRandomFileName();
        //        var path = Path.Combine(Environment.ContentRootPath,
        //                Environment.EnvironmentName, "unsafe_uploads",
        //                trustedFileNameForFileStorage);

        //        await using FileStream fs = new(path, FileMode.Create);
        //        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
        //    }
        //    catch (Exception ex)
        //    {
        //        Logger.LogError("File: {Filename} Error: {Error}",
        //            file.Name, ex.Message);
        //    }
        //}

        //isLoading = false;
    }
}
