@using JLBlazorComponents.Services;
@using PyProcessors;
@using Python.Runtime;
@using TestOpenAI.Helpers;
@using Azure.AI.OpenAI;
@implements IDisposable;
<h3>Chat Against Document</h3>
<div class="card shadow mb-3">
    <div class="card-body d-flex justify-content-between">
        <select class="form-select" @onchange="OnSelectChanged">
            <option value="" selected="@(selectedIndex == String.Empty)">-- Select document --</option>
            @foreach (var item in dict.OrderBy(x=>x.Key))
            {
                <option value="@item.Value" selected="@(item.Value == selectedIndex)">@item.Key</option>
            }
        </select>
        <button class="btn btn-primary text-nowrap" role="button" @onclick="ShowUploadDocument">Upload new document</button>
    </div>
</div>
<div class="alert alert-primary" role="alert">
    @((MarkupString)processMessage)
</div>
@if (!string.IsNullOrWhiteSpace(selectedIndex))
{
    <div class="card shadow">
        <div class="card-header">Chat</div>
        <div class="card-body" style="height:400px; overflow-y:auto;">
            @foreach (var msg in messages ?? new List<ChatMessage>())
            {
                <_ChatMessage chatMessage="@msg" />
            }
        </div>
    </div>
    @if (isReady)
    {
        <div class="mt-4 border border-1 input-group shadow">
            <textarea class="form-control" rows="3" @bind="userInput" id="floatingInput" placeholder="Ask me something."></textarea>
            <button class="btn btn-outline-secondary" type="button" @onclick="DoChat"><i class="oi oi-arrow-circle-right"></i></button>
        </div>
    }
}

@code {
    [Inject] protected ModalService modalService { get; set; } = null!;
    [Inject] protected IWebHostEnvironment webHostEnvironment { get; set; } = null!;
    [Inject] protected FAISSChatProcessor faissChatProcessor { get; set; } = null!;

    string userInput;
    private string selectedIndex = String.Empty;
    private Dictionary<string, string> dict = new();
    List<ChatMessage> messages = new();
    protected bool isReady { get; set; } = false;
    dynamic? qa;
    protected string processMessage { get; set; } = string.Empty;
    protected override void OnInitialized()
    {
        faissChatProcessor.OnProcessStarted += async (sender, str) =>
        {
            processMessage = str;
            await InvokeAsync(StateHasChanged);
        };
        faissChatProcessor.OnProcessCompleted += async (sender, success) =>
        {
            processMessage = success ? "" : "<div>Error</div>";
            await InvokeAsync(StateHasChanged);
        };
        LoadIndexedDocuments();
    }

    private async Task ShowUploadDocument()
    {
        ModalParameters modalParameters = new ModalParameters();
        //modalParameters.Add(nameof(_UploadDocument.OnIndexed), EventCallback.Factory.Create<string?>(this, async (indexFileName) =>
        //{
        //    selectedIndex = indexFileName;
        //    await modalService.Close();
        //    LoadIndexedDocuments();
        //}));
        //await modalService.ShowModalDynamic<_UploadDocument>(Title: "Upload Document", parameters: modalParameters);

        modalParameters.Add(nameof(_UploadDocuments.OnIndexed), EventCallback.Factory.Create<string?>(this, async (indexFileName) =>
        {
            selectedIndex = indexFileName;
            await modalService.Close();
            LoadIndexedDocuments();
        }));
        await modalService.ShowModalDynamic<_UploadDocuments>(Title: "Upload Documents", parameters: modalParameters);
    }
    private void LoadIndexedDocuments()
    {
        dict.Clear();
        var sourceFolder = Utility.GetDocumentSourceFolder(webHostEnvironment);
        var indexFolder = Utility.GetDocumentIndexFolder(webHostEnvironment);
        foreach (var file in Directory.GetFiles(sourceFolder))
        {
            var sourceFileName = Path.GetFileNameWithoutExtension(file);
            var indexFolderName = Path.Combine(Utility.GetDocumentIndexFolder(webHostEnvironment), PyProcessors.Helpers.Utility.CleanString(sourceFileName));
            if (Directory.Exists(indexFolderName) && Directory.GetFiles(indexFolderName).Any()) 
            {
                dict.Add(sourceFileName, indexFolderName);
            }
        }
    }
    private async void OnSelectChanged(ChangeEventArgs args)
    {
        DisposeQA();
        qa = null;
        selectedIndex = args.Value?.ToString();
        processMessage = "Loading chat module for this document";
        //await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        if (!string.IsNullOrWhiteSpace(selectedIndex))
        {
            qa = faissChatProcessor.GetChatModule(selectedIndex);
        }
        messages.Clear();
        messages.Add(new ChatMessage(ChatRole.System, "Hi, how can I help you today with this document?"));
        isReady = true;
        processMessage = "";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
    }
    private async Task DoChat()
    {
        if (!string.IsNullOrWhiteSpace(selectedIndex) && !string.IsNullOrWhiteSpace(userInput))
        {
            messages.Add(new ChatMessage(ChatRole.User, userInput));
            await InvokeAsync(StateHasChanged);
            var result = faissChatProcessor.AskQuestion(qa, userInput);
            //var result = faissChatProcessor.AskAQuestion(selectedIndex, userInput);
            messages.Add(new ChatMessage(ChatRole.Assistant, result??"No result"));
            userInput = String.Empty;
            await InvokeAsync(StateHasChanged);

        }
    }
    private void DisposeQA()
    {
        if (qa != null)
        {
            using (Py.GIL())
            {
                qa.Dispose();
            }

            //((Python.Runtime.PyObject)qa).Dispose();
        }
    }
    public void Dispose()
    {
        DisposeQA();
        faissChatProcessor.Dispose();
    }
}