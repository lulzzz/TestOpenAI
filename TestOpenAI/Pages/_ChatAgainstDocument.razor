@using JLBlazorComponents.Services;
@using PyProcessors;
@using Python.Runtime;
@using TestOpenAI.Helpers;
@using Azure.AI.OpenAI;
@using TestOpenAI.Services;
@implements IDisposable;
<h3>Chat Against Document</h3>
<div class="card shadow mb-3">
    <div class="card-body d-flex justify-content-between">
        <select class="form-select" @onchange="OnSelectChanged">
            <option value="" selected="@(selectedIndex == String.Empty)">-- Select document --</option>
            @foreach (var item in dict.OrderBy(x=>x.Key))
            {
                <option value="@item.Value" selected="@(item.Value == selectedIndex)">@item.Key</option>
            }
        </select>
        <button class="btn btn-primary text-nowrap" role="button" @onclick="ShowUploadDocument">Upload new document</button>
    </div>
</div>
<div class="alert alert-primary" role="alert">
    @((MarkupString)processMessage)
</div>
@if (!string.IsNullOrWhiteSpace(selectedIndex))
{
    <div class="row" style="height:600px;">
        <div class="col-9 d-flex flex-column justify-content-between">
            <div class="card shadow">
                <div class="card-header">Chat</div>
                <div class="card-body" style="height:450px; overflow-y:auto;" @ref="bodyMessages">
                    @foreach (var item in ChatMessagesWithCitations ?? new Dictionary<ChatMessage, List<ResponseCitation>>())
                    {
                        <_ChatMessage chatMessage="@item.Key" citations="@item.Value" OnCitationClicked="OnCitationClicked" />
                    }
                    @if (isThinking)
                    {
                        <_ChatMessage ShowPlaceholder="true" chatMessage="@(new ChatMessage(ChatRole.Assistant, "Thinking..."))" />
                    }
                </div>
            </div>
            @if (isReady)
            {
                <div class="mt-4 border border-1 input-group shadow">
                    <textarea class="form-control" rows="3" @bind="userInput" id="floatingInput" placeholder="Ask me something."></textarea>
                    <button class="btn btn-outline-secondary" type="button" @onclick="DoChat"><i class="oi oi-arrow-circle-right"></i></button>
                </div>
            }
        </div>
        <div class="col-3">
            <div class="card shadow" style="height:600px;overflow-y:auto">
                <div class="card-header">Citations</div>
                @if (citation != null)
                {
                    <div class="card-body">
                        <h5 class="card-title">@citation.title</h5>
                        <h6 class="small card-subtitle mb-2 text-muted">@citation.filepath</h6>
                        <p class="card-text">@citation.content</p>
                    </div>
                }
            </div>
        </div>
    </div>
    
    
}

@code {
    [Inject] protected ModalService modalService { get; set; } = null!;
    [Inject] protected IWebHostEnvironment webHostEnvironment { get; set; } = null!;
    [Inject] protected FAISSChatProcessor faissChatProcessor { get; set; } = null!;
    [Inject] protected IJSRuntime jsRuntime { get; set; } = null!;

    public Dictionary<ChatMessage, List<ResponseCitation>> ChatMessagesWithCitations { get; set; } = new();
    string userInput;
    private string selectedIndex = String.Empty;
    private Dictionary<string, string> dict = new();
    //List<ChatMessage> messages = new();
    protected bool isReady { get; set; } = false;
    dynamic? qa;
    protected string processMessage { get; set; } = string.Empty;
    ElementReference bodyMessages;
    bool isThinking = false;
    List<ResponseCitation> citations = new();
    ResponseCitation? citation;

    protected override void OnInitialized()
    {
        faissChatProcessor.OnProcessStarted += async (sender, str) =>
        {
            processMessage = str;
            await InvokeAsync(StateHasChanged);
        };
        faissChatProcessor.OnProcessCompleted += async (sender, success) =>
        {
            processMessage = success ? "" : "<div>Error</div>";
            await InvokeAsync(StateHasChanged);
        };
        LoadIndexedDocuments();
    }

    private async Task ShowUploadDocument()
    {
        ModalParameters modalParameters = new ModalParameters();
        //modalParameters.Add(nameof(_UploadDocument.OnIndexed), EventCallback.Factory.Create<string?>(this, async (indexFileName) =>
        //{
        //    selectedIndex = indexFileName;
        //    await modalService.Close();
        //    LoadIndexedDocuments();
        //}));
        //await modalService.ShowModalDynamic<_UploadDocument>(Title: "Upload Document", parameters: modalParameters);

        modalParameters.Add(nameof(_UploadDocuments.OnIndexed), EventCallback.Factory.Create<string?>(this, async (indexFileName) =>
        {
            selectedIndex = indexFileName;
            await modalService.Close();
            LoadIndexedDocuments();
        }));
        await modalService.ShowModalDynamic<_UploadDocuments>(Title: "Upload Documents", parameters: modalParameters);
    }
    private void LoadIndexedDocuments()
    {
        dict.Clear();
        var sourceFolderRoot = Utility.GetDocumentSourceFolder(webHostEnvironment);
        var indexFolderRoot = Utility.GetDocumentIndexFolder(webHostEnvironment);

        //check directories in sourceFolder
        foreach (var dirInfo in (new DirectoryInfo(sourceFolderRoot)).GetDirectories())
        {
            var sourceFolderName = dirInfo.Name;
            var sourceFolder = Path.Combine(sourceFolderRoot, sourceFolderName);
            var indexFolder = Path.Combine(indexFolderRoot, PyProcessors.Helpers.Utility.CleanString(sourceFolderName));
            if(Directory.GetFiles(sourceFolder).Any() && Directory.GetFiles(indexFolder).Any())
            {
                dict.Add(sourceFolderName, indexFolder);   
            }

        }
        //foreach (var file in Directory.GetFiles(sourceFolder))
        //{
        //    var sourceFileName = Path.GetFileNameWithoutExtension(file);
        //    var indexFolderName = Path.Combine(Utility.GetDocumentIndexFolder(webHostEnvironment), PyProcessors.Helpers.Utility.CleanString(sourceFileName));
        //    if (Directory.Exists(indexFolderName) && Directory.GetFiles(indexFolderName).Any()) 
        //    {
        //        dict.Add(sourceFileName, indexFolderName);
        //    }
        //}
    }
    private async void OnSelectChanged(ChangeEventArgs args)
    {
        DisposeQA();
        qa = null;
        selectedIndex = args.Value?.ToString();
        processMessage = "Loading chat module for this document";
        //await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        if (!string.IsNullOrWhiteSpace(selectedIndex))
        {
            //qa = faissChatProcessor.GetChatModule(selectedIndex);
            qa = faissChatProcessor.GetConversationModule(selectedIndex);
        }
        ChatMessagesWithCitations.Clear();
        ChatMessagesWithCitations.Add(new ChatMessage(ChatRole.System, "Hi, how can I help you today with this document?"), new List<ResponseCitation>());
        isReady = true;
        processMessage = "";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
    }
    private async Task DoChat()
    {
        if (!string.IsNullOrWhiteSpace(selectedIndex) && !string.IsNullOrWhiteSpace(userInput))
        {
            //
            ChatMessagesWithCitations.Add(new ChatMessage(ChatRole.User, userInput), new List<ResponseCitation>());
            //messages.Add(new ChatMessage(ChatRole.User, userInput));
            isThinking = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
            await jsRuntime.InvokeVoidAsync("scrollToBottom", bodyMessages);

            var lastQuestion = ChatMessagesWithCitations.Keys.LastOrDefault(x=>x.Role == ChatRole.User)?.Content; // messages.LastOrDefault(x => x.Role == ChatRole.User)?.Content;
            var lastAnswer = ChatMessagesWithCitations.Keys.LastOrDefault(x => x.Role == ChatRole.Assistant)?.Content;  //messages.LastOrDefault(x => x.Role == ChatRole.Assistant)?.Content;

            PyProcessors.Models.AIResponse result = faissChatProcessor.AskConversationQuestion(qa, userInput, lastQuestion, lastAnswer);

            isThinking = false;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);

            ChatMessage message = (new ChatMessage(ChatRole.Assistant, result?.Answer ?? "No result"));
            List<ResponseCitation> citations = new();
            if(result?.SourceDocuments != null)
            {
                foreach (var sourceDocument in result.SourceDocuments)
                {
                    citations.Add(new ResponseCitation()
                    {
                        content = sourceDocument.PageContent,
                        title = sourceDocument.Metadata["source"] == null ? "" : Path.GetFileName(sourceDocument.Metadata["source"].ToString()),
                        filepath = sourceDocument.Metadata["page"]?.ToString() ?? "" 

                    });
                }
            }
            ChatMessagesWithCitations.Add(message, citations);
            userInput = String.Empty;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
            await jsRuntime.InvokeVoidAsync("scrollToBottom", bodyMessages);
        }
    }
    private void OnCitationClicked(ResponseCitation clickedCitation)
    {
        citation = clickedCitation;
    }
    private void DisposeQA()
    {
        if (qa != null)
        {
            using (Py.GIL())
            {
                qa.Dispose();
            }

            //((Python.Runtime.PyObject)qa).Dispose();
        }
    }
    public void Dispose()
    {
        DisposeQA();
        faissChatProcessor.Dispose();
    }
}