@using Azure.AI.OpenAI;
@using Azure;
@using System.Text;
@using Microsoft.Extensions.Options;
@using TestOpenAI.Models;
@*<h3>Chat</h3>*@
<div class="card shadow">
    <div class="card-header">Chat</div>
    <div class="card-body" style="height:400px; overflow-y:auto;" @ref="bodyMessages">
    @foreach(var msg in completionOptions?.Messages??new List<ChatMessage>())
    {
        @*<div class="card">
            <div class="card-header">
                @msg.Role.ToString()
            </div>
            <div class="card-body">
                @msg.Content
            </div>
        </div>*@
        <_ChatMessage chatMessage="@msg" />
    }
    </div>
</div>
<div class="mt-4 border border-1 input-group shadow">
    <textarea class="form-control" rows="3" @bind="userInput" id="floatingInput" placeholder="Ask me something."></textarea>
    <button class="btn btn-outline-secondary" type="button" @onclick="DoChat"><i class="oi oi-arrow-circle-right"></i></button>
</div>
@*<button type="button" class="btn btn-primary" @onclick="DoChat">Send</button>*@
@code {
    [Inject] protected IConfiguration configuration { get; set; } = null!;
    [Inject] protected IOptionsMonitor<AOAISettings> aoaiSettings { get; set; } = null!;
    [Inject] protected IJSRuntime jsRuntime { get; set; } = null!;
    string AOAI_ENDPOINT;
    string AOAI_KEY;
    string AOAI_CHAT_DEPLOYMENT_NAME;
    OpenAIClient openAIClient;
    string prompt;
    string promptResponse;
    ChatCompletionsOptions completionOptions;
    string userInput;
    ElementReference bodyMessages;
    protected override async Task OnInitializedAsync()
    {
        AOAI_ENDPOINT = aoaiSettings.CurrentValue.AOAI_ENDPOINT;// configuration.GetValue<string>("Chat:AOAI_ENDPOINT");
        AOAI_KEY = aoaiSettings.CurrentValue.AOAI_KEY;// configuration.GetValue<string>("Chat:AOAI_KEY");
        AOAI_CHAT_DEPLOYMENT_NAME = aoaiSettings.CurrentValue.AOAI_CHAT_DEPLOYMENT_NAME;// configuration.GetValue<string>("Chat:AOAI_DEPLOYMENTID_CHAT");

        var endpoint = new Uri(AOAI_ENDPOINT);
        var credentials = new Azure.AzureKeyCredential(AOAI_KEY);
        openAIClient = new OpenAIClient(endpoint, credentials);



    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            completionOptions = new ChatCompletionsOptions
                {
                    MaxTokens = 400,
                    Temperature = 1f,
                    FrequencyPenalty = 0.0f,
                    PresencePenalty = 0.0f,
                    NucleusSamplingFactor = 0.95f // Top P
                };
            completionOptions.Messages.Add(new ChatMessage(ChatRole.System, @"Hi, how can I help you today?"));
            ChatCompletions response = await openAIClient.GetChatCompletionsAsync(AOAI_CHAT_DEPLOYMENT_NAME, completionOptions);
            completionOptions.Messages.Add(response.Choices[0].Message);
            await InvokeAsync(StateHasChanged);
        }
    }
    protected async Task DoChat()
    {
        completionOptions.MaxTokens = 1000;
        if (String.IsNullOrWhiteSpace(userInput))
        {
            completionOptions.Messages.Add(new ChatMessage(ChatRole.Assistant, @"Hmm... you must put some input."));
        }
        else
        {
            completionOptions.Messages.Add(new ChatMessage(ChatRole.User, userInput));
            var chatThinking = new ChatMessage(ChatRole.Assistant, "Thinking...");
            completionOptions.Messages.Add(chatThinking);

            //ChatCompletions response = await openAIClient.GetChatCompletionsAsync(AOAI_CHAT_DEPLOYMENT_NAME, completionOptions);
            ////completionOptions.Messages.Add(response.Choices[0].Message);
            //completionOptions.Messages[completionOptions.Messages.IndexOf(chatThinking)] = response.Choices[0].Message;

            var idx = completionOptions.Messages.IndexOf(chatThinking);
            var resp = await openAIClient.GetChatCompletionsStreamingAsync(AOAI_CHAT_DEPLOYMENT_NAME, completionOptions);
            await foreach(var choice in resp.Value.GetChoicesStreaming())
            {

                ChatMessage chatMessage = null;
                StringBuilder sb = new StringBuilder();
                await foreach(var msg in choice.GetMessageStreaming())
                {
                    sb.Append(msg.Content);
                    completionOptions.Messages[idx] = new ChatMessage(msg.Role,sb.ToString());
                    await InvokeAsync(StateHasChanged);
                    await jsRuntime.InvokeVoidAsync("scrollToBottom", bodyMessages);
                }
            }

            userInput = String.Empty;
        }
        await InvokeAsync(StateHasChanged);
    }
}
